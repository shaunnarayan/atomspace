/*
 * tests/query/IsTrueUTest.cxxtest
 *
 * Copyright (C) 2020 SingularityNET Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class IsTrueUTest : public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	IsTrueUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);

		as = new AtomSpace();
		eval = new SchemeEval(as);
		eval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");
	}

	~IsTrueUTest()
	{
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_basic_is_true(void);
};

void IsTrueUTest::tearDown(void)
{
}

void IsTrueUTest::setUp(void)
{
}

/*
 * Basic IsTrueLink unit test. The atomspace contains 2 atoms, one
 * with a TRUE_TV
 *
 * (Concept "A" (stv 1 1))
 *
 * one without
 *
 * (Concept "B")
 *
 * querying such atomspace with the condition that the candidates are
 * true should return only the first atom.
 */
void IsTrueUTest::test_basic_is_true(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/is_true.scm\")");

	Handle query = eval->eval_h("query");
	Handle true_query = eval->eval_h("true-query");

	Handle results = HandleCast(query->execute());
	Handle true_results = HandleCast(true_query->execute());

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "true_results = " << oc_to_string(true_results);

	TS_ASSERT_EQUALS(2, results->get_arity());
	TS_ASSERT_EQUALS(1, true_results->get_arity());

	logger().debug("END TEST: %s", __FUNCTION__);
}
